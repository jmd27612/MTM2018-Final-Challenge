/* REXX */
/*******************************************************/
/* The main entrypoint to the report generating script */
/*******************************************************/
CLRSCN
CALL EXECUTE_DEPENDENT_JCL
CALL OPEN_OUTPUT
CALL REPORT_HEADER
CALL MAIN_SYSTEM
CALL MAIN_VM_INFO
CALL MAIN_NETWORK_INFO
CALL MAIN_SUBSYS
CALL REPORT_FOOTER
CALL WRITE_OUTPUT
EXIT 0
/*******************************************************/
/* SUBMITS JOBS TO REFRESH DATA USED IN THE REPORT     */
/* DEPENDENT ON: EXECUTE_JCL                           */
/* ABORTS ON: JCL ERROR OR LONG-RUNNING JOB            */
/*******************************************************/
EXECUTE_DEPENDENT_JCL:
SAY 'EXECUTING DEPENDENT JCL TO REFRESH STORED DATA...'
RESULT = 0
RESULT = RESULT + EXECUTE_JCL(SSI)
RESULT = RESULT + EXECUTE_JCL(S01)
RESULT = RESULT + EXECUTE_JCL(S00)
IF RESULT = 0 THEN
DO
SAY ' '
SAY '  ALL STORED DATA HAS BEEN UPDATED.'
SAY ' '
END
ELSE
DO
SAY 'FAILED TO UPDATE STORED DATA... '
SAY ' '
SAY 'EXITING...'
EXIT
END
RETURN
/*******************************************************/
/* SUBMITS JOBS TO REFRESH DATA USED TO GENERATE RPT   */
/* WAITS FOR JOB TO COMPLETE SUCCESSFULLY OR RETURNS 1 */
/*******************************************************/
EXECUTE_JCL:
PARSE ARG DSN
SAY '  EXECUTING JCL - ' || DSN
ADDRESS TSO
X = OUTTRAP("VAR.")
"SUBMIT 'Z00945.CH15.JCL(" || DSN || ")'"
TSOMSG = VAR.1
PARENTHESIS_POSITION = POS('(',TSOMSG)
JBID = SUBSTR(TSOMSG,9,8)
JBNM = SUBSTR(TSOMSG,4,PARENTHESIS_POSITION - 4)
SAY '    JOBID   = ' || JBID
SAY '    JOBNAME = ' || JBNM
FULL_JOB_NAME = JBNM || '(' || JBID || ')'
REQ_RESP = 'JOB' || FULL_JOB_NAME || ' ON OUTPUT QUEUE'
I = 1
DO FOREVER
  "STATUS " || JBNM ||"(" || JNO || ")"
  FINALMSG = VAR.I
  IF FINALMSG = REQ_RESP THEN
    DO
      RETURN 0
      LEAVE
    END
  I = I + 1
  IF I > 500 THEN
    DO
      SAY 'EXITING FROM TIMEOUT'
      RETURN 1
      LEAVE
    END
END
/*******************************************************/
/* ALLOCATES NEW DATASET FOR REPORT OUTPUT             */
/* SETS THE APPENDER TO ROW 1 FOR REPORT WRITING       */
/*******************************************************/
OPEN_OUTPUT:
SAY 'ALLOCATING DATASET FOR REPORT OUTPUT - P3.OUTPUT(#15)...'
"ALLOCATE DATASET(P3.OUTPUT(#15)) FI(#15) SHR REUSE"
"EXECIO 0 DISKW #15 (STEM O. OPEN)"
ROW = 1
SAY '    DATASET ALLOCATED. APPENDER SET TO ROW 1.'
SAY ' '
RETURN
/*******************************************************/
/* WRITES THE STRING PARAMETER TO THE OUTPUT BUFFER    */
/* INCREMENTS THE APPENDER ROW                         */
/*******************************************************/
APPEND:
PARSE ARG INPUT_LINE
O.ROW = INPUT_LINE
ROW = ROW + 1
RETURN
/*******************************************************/
/* WRITES THE OUTPUT BUFFER TO THE REPORT DATASET     */
/*******************************************************/
WRITE_OUTPUT:
"EXECIO * DISKW #15 (STEM O. FINIS)"
"FREE FI(#15)"
RETURN
/*******************************************************/
/* BUILDS THE REPORT'S MAIN HEADER                     */
/* DEPENDENT ON: CENTEREDSTRING, APPEND                */
/*******************************************************/
REPORT_HEADER:
SAY 'BUILDING REPORT HEADER... '
HEADER_TEXT = 'SYSTEM REPORT - ' || MVSVAR('SYSNAME')
X = CENTEREDSTRING(60)
STARS = '******************************************************************'
CALL APPEND STARS
CALL APPEND '***' || PADDED_TEXT || '***'
HEADER_TEXT = 'RUN ON ' || DATE() || ' AT ' || TIME()
X = CENTEREDSTRING(60)
CALL APPEND '***' || PADDED_TEXT || '***'
CALL APPEND STARS
CALL APPEND ' '
SAY ' '
SAY '  HEADER COMPLETE... '
SAY ' '
RETURN
/*******************************************************/
/* BUILDS THE REPORT'S MAIN SECTION INCLUDING DETAILS  */
/* FOR HARDWARE, SOFTWARE, NETWORK, & VIRTUALIZATION   */
/* DEPENDENT ON: LOAD_ADDRESS_SPACES, LOAD_DASD, APPEND*/
/*******************************************************/
MAIN_SYSTEM:
SAY 'PROCESSING MAIN REPORT SECTION... '
CALL APPEND 'SYSTEM NAME: ' || MVSVAR(SYSNAME)
CALL APPEND '  DEFINED BY: SYS1.PARMLIB '
CALL APPEND ' '
TEMP = MVSVAR(SYSNAME) || ' IS A MEMBER OF THE SYSPLEX '
TEMP = TEMP || MVSVAR(SYSPLEX) || '.'
CALL APPEND TEMP
CALL APPEND ' '
CALL READ_S00
PARSE VALUE MVSVAR(SYSOPSYS) WITH W1 W2 "." W3 "." W4 W5
CALL APPEND MVSVAR(SYSNAME) || ' IS RUNNING ' || W1 || ":"
CALL APPEND '  VERSION: ' || W2
CALL APPEND '  RELEASE: ' || W3
CALL APPEND '  MODIFICATION LEVEL: ' || W4
CALL APPEND '  FUNCTION MODIFIER ID: ' || W5
CALL APPEND ' '
TEMP = MVSVAR(SYSNAME) || ' INITIAL PROGRAM LOAD (IPL) ON '
TEMP = TEMP || IPL_DATE || ' AT ' || IPL_TIME
CALL APPEND TEMP
CALL APPEND ' '
CALL APPEND MVSVAR(SYSNAME) || ' HARDWARE: '
CALL APPEND '  MACHINE TYPE: ' || MACHINE_TYPE
CALL APPEND '  MODEL_NUMBER: ' || MODEL_NUMBER
CALL APPEND '  SERIAL_NUMBER: ' || SERIAL_NUMBER
CALL APPEND ' '
CALL LOAD_ADDRESS_SPACES
TEMP = MVSVAR(SYSNAME) || ' HAS AN ADDRESS SPACE (MEMORY) OF '
TEMP = TEMP || STORAGE || '.'
CALL APPEND TEMP
CALL APPEND '  ADDRESS SPACE IDENTIFICATION TOKEN: ' || ASIT
IF STATE = 'PRV' THEN
  TEMP = 'PRIVATE'
ELSE
  TEMP = 'PUBLIC'
CALL APPEND '  ADDRESS SPACE IS IN A ' || TEMP || ' STATE. '
CALL APPEND ' '
CALL LOAD_DASD
TEMP = MVSVAR(SYSNAME) || ' HAS ' || DASD_COUNT || ' DIRECT ACCESS '
TEMP = TEMP || 'STORAGE DEVICES (DASD). '
CALL APPEND TEMP
CALL APPEND '  TOTAL CYLINDERS: ' || DASD_TOTAL_CYLINDERS
CALL APPEND '  READ ONLY DASD: ' || DASD_READ_ONLY_COUNT
CALL APPEND '  READ ONLY DASD CYLINDERS: ' || DASD_TOTAL_READ_ONLY_CYLINDERS
CALL APPEND ' '
SAY ' '
SAY '- MAIN SECTION COMPLETE - '
SAY ' '
RETURN
/*******************************************************/
/* BUILDS THE SECTION ON THE VIRTUAL ENVIRONMENT       */
/* DEPENDENT ON: SECTION_HEADER, LOAD_VM_INFO, APPEND  */
/*******************************************************/
MAIN_VM_INFO:
SAY 'WRITING VM SECTION... '
HEADER_TEXT = 'VIRTUAL MACHINE & THE Z/VM ENVIRONMENT'
CALL SECTION_HEADER
CALL LOAD_VM_INFO
TEMP = MVSVAR(SYSNAME) || ' IS RUNNING AS A VIRTUAL MACHINE ON Z/VM: '
CALL APPEND TEMP
CALL APPEND '  VIRTUAL MACHINE NAME: ' || ZOS_VM_NAME
CALL APPEND '  HYPERVISOR (Z/VM) NAME: ' || ZVM_NAME
CALL APPEND '  THE HYPERVISOR IS RUNNING: '
CALL APPEND '    ' || ZVM_VERSION
CALL APPEND ' '
TEMP = 'THERE ARE CURRENTLY ' || ZVM_VM_COUNT || ' VMS RUNNING ON '
TEMP = TEMP || ZVM_NAME || '.'
CALL APPEND TEMP
CALL APPEND ' '
CALL LOAD_TIME
TEMP = ZOS_VM_NAME || ' HAS CONSUMED ' || VIRTUAL_CPU_TIME
TEMP = TEMP || ' HOURS OF VIRTUAL CPU TIME. '
CALL APPEND TEMP
TEMP = '  THE TOTAL CPU TIME IS ' || TOTAL_CPU_TIME || ' HOURS DUE TO '
TEMP = TEMP || 'HYPERVISOR OVERHEAD. '
CALL APPEND TEMP
CALL APPEND ' '
SAY ' '
SAY '- VM SECTION COMPLETE - '
SAY ' '
RETURN
/*******************************************************/
/* BUILDS THE SECTION ON THE NETWORKING ENVIRONMENT    */
/* DEPENDENT ON: SECTION_HEADER, LOAD_NET_INFO, APPEND */
/*******************************************************/
MAIN_NETWORK_INFO:
SAY 'WRITING NETWORK SECTION... '
HEADER_TEXT = 'NETWORK INFORMATION'
CALL SECTION_HEADER
CALL LOAD_NET_INFO
TEMP = MVSVAR(SYSNAME) || ' IS CONNECTED TO THE NETWORK VIA INTERFACE '
TEMP = TEMP || NET_LINK_NAME || ' WITH '
CALL APPEND TEMP
TEMP = '  AN ASSIGNED IP ADDRESS OF ' || NET_IP_ADDRESS || '.'
CALL APPEND TEMP
CALL APPEND ' '
TEMP = ZOS_VM_NAME || ' IS CONNECTED TO A VIRTUAL NETWORK '
TEMP = TEMP || 'INTERFACE '
CALL APPEND TEMP
CALL APPEND '  CONFIGURED BY THE Z/VM HYPERVISOR: '
TEMP = '    VIRTUAL ADAPTER: ' || VM_NETWORK_ADAPTER_NAME
TEMP = TEMP || ' (SHARED WITH ' || VM_NETWORK_ADAPTER_DEV_COUNT
TEMP = TEMP || ' VIRTUAL MACHINES)'
CALL APPEND TEMP
TEMP = '    VIRTUAL ADAPTER MAC: ' || VM_NETWORK_ADAPTER_MAC
CALL APPEND TEMP
CALL APPEND ' '
TEMP = VM_NETWORK_ADAPTER_NAME || ' IS CONNECTED TO VIRTUAL SWITCH: '
TEMP = TEMP || VM_NETWORK_SWITCH
CALL APPEND TEMP
TEMP = '    CONNECTED DEVICES: ' || VIRTUAL_SWITCH_DEV_COUNT
CALL APPEND TEMP
TEMP = '    MAXIMUM ALLOWED CONNECTED DEVICES: '
TEMP = TEMP || VIRTUAL_SWITCH_MAX_DEV_COUNT
CALL APPEND TEMP
TEMP = '    VIRTUAL SWITCH MAC: ' || VIRTUAL_SWITCH_MAC
CALL APPEND TEMP
CALL APPEND ' '
SAY ' '
SAY '- NETWORK SECTION COMPLETE - '
SAY ' '
RETURN 0
/*******************************************************/
/* PARSES THE S00 DATASET GENERATED BY DEPENDENT JCL   */
/* S00 CONTAINS INFORMATION ON THE IPL AND HARDWARE    */
/* DEPENDENT ON: LOAD_ZOS_IPL LOAD_Z_SYSTEM            */
/*******************************************************/
READ_S00:
SAY 'PROCESSING S00... '
"ALLOCATE DATASET(CH15.OUTPUT(S00)) FI(RPT) SHR REUSE"
"EXECIO * DISKR RPT (STEM RPT. FINIS)"
   DO I=1 TO RPT.0
     PARSE VAR RPT.I W1 W2 W3 W4 W5 W6 W7
     SELECT
      WHEN W1 = 'SYSTEM' & W2 = 'IPLED' THEN CALL LOAD_ZOS_IPL
      WHEN W1 = 'CPC' & W2 = 'ND' & W3 = '=' THEN CALL LOAD_Z_SYSTEM
      OTHERWISE ITERATE
     END
   END
"FREE FI(RPT)"
SAY ' '
SAY '  PROCESSING S00 COMPLETE. '
SAY ' '
RETURN
/*******************************************************/
/* STORES THE IPL INFORMATION INTO MEMORY                */
/*******************************************************/
LOAD_ZOS_IPL:
SAY 'LOADING IPL INFORMATION... '
IPL_TIME = W4
IPL_DATE = W6
SAY ' '
SAY '  IPL INFORMATION LOADED. '
SAY ' '
RETURN
/*******************************************************/
/* LOADS THE HARDWARE INFORMATION INTO MEMORY            */
/*******************************************************/
LOAD_Z_SYSTEM:
SAY 'LOADING HARDWARE INFORMATION... '
MACHINE_TYPE = SUBSTR(W4,3,4)
MODEL_NUMBER = SUBSTR(W4,8,3)
SERIAL_NUMBER = SUBSTR(W4,26,5)
SAY ' '
SAY '  HARDWARE INFORMATION LOADED. '
SAY ' '
RETURN
/*******************************************************/
/* LOADS THE NETWORK INFORMATION INTO MEMORY           */
/*******************************************************/
LOAD_NET_INFO:
SAY 'LOADING NETWORK INTERFACE INFORMATION... '
N = OUTTRAP("NET",4)
NETSTAT HOME
PARSE VAR NET3 NET3_WORD1 NET3_WORD2 NET3_WORD3
PARSE VAR NET4 NET4_WORD1 NET4_WORD2 NET4_WORD3
NET_LINK_NAME = NET3_WORD2
NET_IP_ADDRESS = NET4_WORD2
V = OUTTRAP("VM",2)
Q NIC
PARSE VAR VM1 VM_1 VM_2 VM_3 VM_4 VM_5 VM_6 VM_7 VM_8
VM_NETWORK_ADAPTER_NAME = VM_6
VM_NETWORK_ADAPTER_DEV_COUNT = VM_8
PARSE VAR VM2 VM_1 VM_2 VM_3 VM_4 VM_5 VM_6 VM_7 VM_8
VM_NETWORK_SWITCH = VM_5
VM_NETWORK_ADAPTER_MAC = VM_2
V = OUTTRAP("VM",5)
Q LAN
PARSE VAR VM1 VM_1 VM_2 VM_3 VM_4 VM_5 VM_6 VM_7 VM_8 VM_9
VIRTUAL_SWITCH_DEV_COUNT = VM_7
VIRTUAL_SWITCH_MAX_DEV_COUNT = VM_9
PARSE VAR VM5 VM_1 VM_2 VM_3 VM_4 VM_5 VM_6 VM_7 VM_8 VM_9
VIRTUAL_SWITCH_MAC = VM_3
SAY ' '
SAY '  NETWORK INTERFACE INFORMATION LOADED. '
SAY ' '
RETURN
/*******************************************************/
/* LOADS THE VIRTUAL ENVIRONMENT INFORMATION INTO MEM  */
/*******************************************************/
LOAD_VM_INFO:
SAY 'LOADING VIRTUAL MACHINE INFORMATION... '
V = OUTTRAP("VM",1)
Q CPLEVEL
ZVM_VERSION = VM1
V = OUTTRAP("VM",1)
Q USERID
PARSE VAR VM1 VM_WORD1 VM_WORD2 VM_WORD3 VM_WORD4
ZVM_NAME = VM_WORD3
ZOS_VM_NAME = VM_WORD1
V = OUTTRAP("VM",1)
Q USERS
PARSE VAR VM1 VM_WORD1 VM_WORD2 VM_WORD3 VM_WORD4 VM_WORD5 VM_WORD6
ZVM_VM_COUNT = VM_WORD1
SAY ' '
SAY '  VIRTUAL MACHINE INFORMATION LOADED. '
SAY ' '
RETURN
/*******************************************************/
/* LOADS THE ADDRESS SPACE INFORMATION INTO MEMORY     */
/*******************************************************/
LOAD_ADDRESS_SPACES:
SAY 'LOADING ADDRESS SPACE INFORMATION... '
V = OUTTRAP("SP",2)
Q SP
PARSE VAR SP2 SP_1 SP_2 SP_3 SP_4 SP_5 SP_6
ASIT = SP_1
STORAGE = SP_2
STATE = SP_3
SPACE_ID = SP_5
SAY ' '
SAY '  ADDRESS SPACE INFORMATION LOADED.'
SAY ' '
RETURN
/*******************************************************/
/* LOADS THE DASD INFORMATION INTO MEMORY              */
/*******************************************************/
LOAD_DASD:
SAY 'LOADING DASD INFORMATION... '
DASD_COUNT = 0
DASD_READ_ONLY_COUNT = 0
DASD_TOTAL_CYLINDERS = 0
DASD_TOTAL_READ_ONLY_CYLINDERS = 0
V = OUTTRAP("DA.",500)
Q DASD
DO I=1 TO DA.0
  PARSE VAR DA.I  DA_1 DA_2 DA_3 DA_4 DA_5 DA_6 DA_7 DA_8
  IF DA_1 = 'DASD' THEN
  DO
    DASD_COUNT = DASD_COUNT + 1
    DASD_TOTAL_CYLINDERS = DASD_TOTAL_CYLINDERS + DA_6
    IF DA_5 = 'R/O' THEN
    DO
      DASD_READ_ONLY_COUNT = DASD_READ_ONLY_COUNT + 1
      DASD_TOTAL_READ_ONLY_CYLINDERS = DASD_TOTAL_READ_ONLY_CYLINDERS + DA_6
    END
  END
END
SAY ' '
SAY '  DASD INFORMATION LOADED.'
SAY ' '
RETURN
/*******************************************************/
/* LOADS THE PROCESSOR TIME CONSUMPTION INFORMATION    */
/*   INTO MEMORY                                       */
/*******************************************************/
LOAD_TIME:
SAY 'LOADING PROCESSOR TIME INFORMATION... '
V = OUTTRAP("TI",2)
Q T
PARSE VAR TI2 TI_1 TI_2 TI_3 TI_4 TI_5 TI_6
CONNECT_TIME = TI_2
VIRTUAL_CPU_TIME = TI_4
TOTAL_CPU_TIME = TI_6
SAY ' '
SAY '  PROCESSOR TIME LOADED.'
SAY ' '
RETURN
/*******************************************************/
/* PARSES THE SSI DATASET GENERATED BY DEPENDENT JCL   */
/* SSI CONTAINS INFORMATION ON THE ACTIVE SUBSYSTEMS   */
/* DEPENDENT ON: PARM_SUBSYS                           */
/*******************************************************/
MAIN_SUBSYS:
SAY 'PROCESSING SSI - ACTIVE SUBSYSTEMS...'
HEADER_TEXT = 'THE FOLLOWING SUBSYSTEMS ARE ACTIVE ON THE SYSTEM'
X =  SECTION_HEADER()
"ALLOCATE DATASET(CH15.OUTPUT(SSI)) FI(RPT) SHR REUSE"
"EXECIO * DISKR RPT (STEM RPT. FINIS)"
  DO I = 1 TO RPT.0
      IF POS('SUBSYS=',RPT.I) > '0' THEN CALL PARM_SUBSYS
  END
SAY '  PROCESSING SSI COMPLETE.'
SAY ' '
RETURN
/*******************************************************/
/* BUILDS THE SECTION HEADER                           */
/* DEPENDENT ON: CENTEREDSTRING                        */
/*******************************************************/
SECTION_HEADER:
X = CENTEREDSTRING(59)
STARS = '* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * '
CALL APPEND STARS
CALL APPEND ' * ' || PADDED_TEXT || ' * '
CALL APPEND STARS
CALL APPEND ' '
RETURN 0
/*******************************************************/
/* PADS A STRING SO THAT IT IS CENTERED BETWEEN SPACES */
/*******************************************************/
CENTEREDSTRING:
PARSE ARG REQUIRED_LENGTH
TEXT_LENGTH = LENGTH(HEADER_TEXT)
PAD_LENGTH = (REQUIRED_LENGTH - TEXT_LENGTH) / 2
OUTPUT_TEXT = ''
DO I = 1 TO PAD_LENGTH
  OUTPUT_TEXT = OUTPUT_TEXT || ' '
END
OUTPUT_TEXT = OUTPUT_TEXT || HEADER_TEXT || OUTPUT_TEXT
IF LENGTH(OUTPUT_TEXT) /= REQUIRED_LENGTH THEN
  OUTPUT_TEXT = OUTPUT_TEXT || ' '
PADDED_TEXT = OUTPUT_TEXT
RETURN 0
/*******************************************************/
/* BUILDS THE SECTION ON THE ACTIVE SUBSYSTEMS         */
/* RETRIEVES SUBSYSTEMS NAMES AND NARRATIVES FROM THE  */
/* RESOURCES PARTITIONED DATASET DYNAMICALLY           */
/* DEPENDENT ON: NARRATIVE_SUBSYS, APPEND              */
/*******************************************************/
PARM_SUBSYS:
PARSE VAR RPT.I W1 W2
CALL APPEND SUBSTR(W1,8)
SYS = SUBSTR(W1,8)
"ALLOCATE DATASET(CH15.RESOURCE(SSILIST)) FI(LIST) SHR REUSE"
"EXECIO * DISKR LIST (STEM LIST. FINIS)"
  DO I2 = 1 TO LIST.0
     IF POS(SYS,SUBSTR(LIST.I2,1,4)) > 0 THEN
       DO
         CALL APPEND SUBSTR(LIST.I2,5,68)
       END
  END
DSN = "CH15.RESOURCE("SYS")"
IF SYSDSN(DSN) = 'OK' THEN CALL NARRATIVE_SUBSYS
ELSE
  DO
    SYS = 'NOINFO'
    CALL NARRATIVE_SUBSYS
  END
RETURN
/*******************************************************/
/* RETRIEVES NARRATIVES FROM THE RESOURCES PDS         */
/* DEPENDENT ON: APPEND                                */
/*******************************************************/
NARRATIVE_SUBSYS:
"ALLOCATE DATASET(CH15.RESOURCE("SYS")) FI(NAR) SHR REUSE"
"EXECIO * DISKR NAR (STEM NAR. FINIS)"
  DO I3 = 1 TO NAR.0
    CALL APPEND ("     " || SUBSTR(NAR.I3,1,65))
  END
  CALL APPEND ' '
RETURN
/*******************************************************/
/* WRITES THE REPORT FOOTER INCLUDING AUTHOR INFO AND  */
/* WHERE TO LOCATE THIS SCRIPT                         */
/* DEPENDENT ON: APPEND                                */
/*******************************************************/
REPORT_FOOTER:
SAY 'PROCESSING FOOTER...'
HEADER_TEXT = 'END OF REPORT'
X =  SECTION_HEADER()
"ALLOCATE DATASET(CH15.RESOURCE("FOOTER")) FI(NAR) SHR REUSE"
"EXECIO * DISKR NAR (STEM NAR. FINIS)"
  DO I3 = 1 TO NAR.0
    CALL APPEND (" " || SUBSTR(NAR.I3,1,65))
  END
SAY '  PROCESSING FOOTER COMPLETE.'
RETURN